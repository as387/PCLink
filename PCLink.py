import json
import os
import platform
import psutil
import subprocess
import win32gui
import win32con
import webbrowser
import sys
from telegram.error import Conflict
import io
import qrcode
import ctypes
from PIL import Image, ImageGrab
from typing import Union

import pystray
from PIL import Image
import threading
import asyncio

try:
    from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
    import comtypes
except ImportError:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pycaw comtypes")

try:
    import win32gui, win32con
except ImportError:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Focus Assist –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywin32")


# –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ
try:
    import pyperclip
except ImportError:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'pyperclip' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
    pyperclip = None

try:
    import pyautogui
except ImportError:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'pyautogui' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–∞ Windows –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyautogui")
    pyautogui = None

try:
    import cv2
except ImportError:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'opencv-python' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –§—É–Ω–∫—Ü–∏—è —Å–Ω–∏–º–∫–∞ —Å –∫–∞–º–µ—Ä—ã –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install opencv-python")
    cv2 = None

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
    from telegram.ext import (
        ApplicationBuilder,
        CommandHandler,
        CallbackQueryHandler,
        ContextTypes,
        MessageHandler,
        filters
    )
    from telegram.error import BadRequest
except ImportError:
    print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-telegram-bot' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install python-telegram-bot")
    sys.exit(1) 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
config = {}
user_states = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
user_current_path = {} # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json."""
    global config
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bundled-—Ñ–∞–π–ª–∞–º
        # –í —Å–ª—É—á–∞–µ PyInstaller, sys._MEIPASS —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        # –ü—Ä–∏ –æ–±—ã—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ sys._MEIPASS –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        base_path = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname(__file__)))
        config_path = os.path.join(base_path, 'config.json') # <-- –í–æ—Ç –∫–∞–∫ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç—å!

        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª 'config.json' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {config_path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º.")
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        sys.exit(1)
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ config.json.")
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {type(e).__name__}: {e}")
        sys.exit(1)

def save_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª config.json."""
    try:
        with open("config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

load_config()

TOKEN = config.get("TOKEN")
OWNER_IDS = config.get("OWNER_IDS", [])

if not TOKEN or not OWNER_IDS:
    print("–û—à–∏–±–∫–∞: TOKEN –∏–ª–∏ OWNER_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ config.json.")
    sys.exit(1)

TUTORIAL_TEXT = """
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö.**

--- **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** ---
- **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö**: –í—ã–∫–ª—é—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.
- **–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã**: –î–æ—Å—Ç—É–ø –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º, –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∑–∞–¥–∞—á, –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏–º —É—Ç–∏–ª–∏—Ç–∞–º.
- **–í–µ–±-–¥–µ–π—Å—Ç–≤–∏—è**: –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤.
- **–§–∞–π–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã**: –ú–æ—â–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—É—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥.
- **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞**: –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.
- **–¢—É—Ç–æ—Ä–∏–∞–ª**: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

--- **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö** ---
- `–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö`: –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä.
- `–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö`: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä.
- `–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä`: –û—Ç–∫–ª—é—á–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π.
- `–°—Ç–∞—Ç—É—Å –ü–ö`: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CPU, RAM –∏ –¥–∏—Å–∫–∞.

--- **–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã** ---
- `–°–∫—Ä–∏–Ω—à–æ—Ç`: –î–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.
- `–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á`: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–∞–º—è—Ç–∏, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
- `–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`: –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ü–ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ü–ö.
- `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏`: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏ –Ω–æ—É—Ç–±—É–∫–∞.
- `–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏`: –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç `speedtest-cli`).

--- **–§–∞–π–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã** ---
- `–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä`: –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ –ø–∞–ø–∫–∞–º –Ω–∞ –ü–ö, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —á–∞—Ç.
- `–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏`: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
- `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É`: –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ü–ö.

--- **–í–∞–∂–Ω–æ** ---
- –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–∏ ID —É–∫–∞–∑–∞–Ω—ã –≤ `OWNER_IDS` –≤ —Ñ–∞–π–ª–µ `config.json`.
- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (`pip install ...`). –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
"""

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† –ú–ï–ù–Æ ---

def get_main_menu_keyboard():
    return [
        [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö", callback_data="pc_control_menu"), InlineKeyboardButton("üõ†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", callback_data="system_utilities_menu")],
        [InlineKeyboardButton("üåê –í–µ–±-–¥–µ–π—Å—Ç–≤–∏—è", callback_data="web_actions_menu"), InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="advanced_features_menu")],
        [InlineKeyboardButton("üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞", callback_data="qr_code_generator_prompt"), InlineKeyboardButton("üìñ –¢—É—Ç–æ—Ä–∏–∞–ª", callback_data="send_tutorial")]
    ]

def get_pc_control_keyboard():
    return [
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="shutdown"), InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data="restart")],
        [InlineKeyboardButton("‚ö´ –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä", callback_data="monitor_off"), InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ü–ö", callback_data="status")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

def get_system_utilities_keyboard():
    return [
        [InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"), InlineKeyboardButton("üìà –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", callback_data="process_list")],
        [InlineKeyboardButton("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", callback_data="clipboard_menu"), InlineKeyboardButton("üîã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏", callback_data="battery_status")],
        [InlineKeyboardButton("üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã", callback_data="take_photo"), InlineKeyboardButton("üöÄ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", callback_data="speed_test")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

def get_web_actions_keyboard():
    keyboard = []
    for i, site in enumerate(config.get("WEBSITES", [])):
        keyboard.append([
            InlineKeyboardButton(site["name"], callback_data=f"open_website_{i}"),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_website_{i}")
        ])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", callback_data="add_website_prompt")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return keyboard

def get_file_script_keyboard():
    return [
        [InlineKeyboardButton("üìÇ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="file_manager_open")],
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏", callback_data="upload_file_prompt")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="run_command_prompt")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

def get_clipboard_keyboard():
    return [
        [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ü–ö", callback_data="clipboard_get")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ü–ö", callback_data="clipboard_set_prompt")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="system_utilities_menu")]
    ]

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_chat_user_id(update_or_query: Union[Update, CallbackQuery]):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç chat_id –∏ user_id –∏–∑ Update –∏–ª–∏ CallbackQuery."""
    if isinstance(update_or_query, Update):
        return update_or_query.effective_chat.id, update_or_query.effective_user.id
    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery
    return update_or_query.message.chat_id, update_or_query.from_user.id

def get_advanced_features_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚è∞ –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è", callback_data="shutdown_timer_prompt")],
        [InlineKeyboardButton("üîá –í–∫–ª/–í—ã–∫–ª –∑–≤—É–∫", callback_data="toggle_sound"),
         InlineKeyboardButton("üßò –í–∫–ª/–í—ã–∫–ª —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É", callback_data="toggle_focus_assist")],
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä —É –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, data in user_states.items():
        if "shutdown_timer" in data:
            keyboard.insert(1, [InlineKeyboardButton(
                f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä ({data['timer_minutes']} –º–∏–Ω)", 
                callback_data="cancel_shutdown_timer"
            )])
            break
            
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return keyboard

async def send_advanced_features_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–ö:", get_advanced_features_keyboard(), context)

async def _send_or_edit_menu(chat_id: int, user_id: int, text: str, keyboard: list, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –∏–∑–±–µ–≥–∞—è –æ—à–∏–±–æ–∫."""
    reply_markup = InlineKeyboardMarkup(keyboard)
    last_menu_message_id = user_states.get(user_id, {}).get("last_menu_message_id")

    if last_menu_message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=last_menu_message_id, text=text, reply_markup=reply_markup
            )
            return
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {last_menu_message_id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
    
    new_message = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
    if user_id not in user_states:
        user_states[user_id] = {}
    user_states[user_id]["last_menu_message_id"] = new_message.message_id

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ ---

async def send_main_menu(update_or_query: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE):
    chat_id, user_id = get_chat_user_id(update_or_query)
    await _send_or_edit_menu(chat_id, user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", get_main_menu_keyboard(), context)

async def send_pc_control_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö:", get_pc_control_keyboard(), context)

async def send_system_utilities_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:", get_system_utilities_keyboard(), context)

async def send_web_actions_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–í–µ–±-–¥–µ–π—Å—Ç–≤–∏—è:", get_web_actions_keyboard(), context)

async def send_file_script_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–§–∞–π–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã:", get_file_script_keyboard(), context)

async def send_clipboard_menu(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await _send_or_edit_menu(query.message.chat_id, query.from_user.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞:", get_clipboard_keyboard(), context)

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await send_main_menu(update, context)

async def set_shutdown_timer_prompt(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
    prompt_msg = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö:"
    )
    user_states[query.from_user.id] = {
        "state": "awaiting_shutdown_timer",
        "prompt_message_id": prompt_msg.message_id,
        "last_menu_message_id": query.message.message_id
    }

async def set_focus_assist_mode(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, mode: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º Focus Assist (0-–≤—ã–∫–ª, 1-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 2-—Ç–æ–ª—å–∫–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∏)"""
    try:
        if platform.system() == "Windows":
            hwnd = win32gui.FindWindow("Windows.UI.Core.CoreWindow", "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—é")
            if hwnd:
                # 0x1001 - –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                win32gui.PostMessage(hwnd, win32con.WM_COMMAND, 0x1001, mode)
                await query.answer(f"–†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}", show_alert=True)
            else:
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ –ü–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—é", show_alert=True)
        else:
            await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Focus Assist: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if query.from_user.id not in OWNER_IDS:
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    action = query.data
    
    # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    simple_actions = {
        "main_menu": send_main_menu,
        "pc_control_menu": send_pc_control_menu,
        "system_utilities_menu": send_system_utilities_menu,
        "web_actions_menu": send_web_actions_menu,
        "advanced_features_menu": send_advanced_features_menu,
        "file_script_menu": send_file_script_menu,
        "clipboard_menu": send_clipboard_menu,
        "shutdown": shutdown_pc,
        "restart": restart_pc,
        "monitor_off": turn_off_monitor,
        "status": get_pc_status,
        "screenshot": take_screenshot,
        "battery_status": get_battery_status,
        "speed_test": run_speed_test,
        "process_list": list_processes,
        "file_manager_open": file_manager_handler,
        "clipboard_get": get_clipboard,
        "take_photo": take_photo,
        "send_tutorial": send_tutorial_file,
        "toggle_sound": toggle_sound,
        "toggle_focus_assist": toggle_focus_assist,
        "cancel_shutdown_timer": cancel_shutdown_timer,
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if action in simple_actions:
        await simple_actions[action](query, context)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    if action.startswith("open_website_"): 
        await open_website(query, context)
    elif action.startswith("delete_website_"): 
        await delete_website(query, context)
    elif action.startswith("proc_kill_"): 
        await kill_process(query, context)
    elif action.startswith("fm_nav_"): 
        await file_manager_handler(query, context)
    elif action.startswith("fm_upload_"): 
        await file_manager_upload_handler(query, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    elif action.endswith("_prompt"):
        prompts = {
            "qr_code_generator_prompt": ("awaiting_qr_text", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è QR-–∫–æ–¥–∞:"),
            "add_website_prompt": ("awaiting_website_name", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ–π YouTube'):"),
            "upload_file_prompt": ("awaiting_file_path", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."),
            "run_command_prompt": ("awaiting_command", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."),
            "clipboard_set_prompt": ("awaiting_clipboard_text", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."),
            "shutdown_timer_prompt": ("awaiting_shutdown_timer", "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è:"),
        }
        
        if action in prompts:
            state, text = prompts[action]
            prompt_msg = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=text
            )
            user_states[query.from_user.id] = {
                "state": state,
                "prompt_message_id": prompt_msg.message_id,
                "last_menu_message_id": query.message.message_id
            }
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await send_main_menu(query, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞."""
    user_id = update.effective_user.id
    if user_id not in OWNER_IDS:
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
    except Exception:
        pass

    state_data = user_states.get(user_id, {})
    current_state = state_data.get("state")

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /qr
    if not current_state:
        if update.message.text.startswith("/qr "):
            text_to_encode = update.message.text[4:].strip()
            if text_to_encode:
                await generate_qr_code(update, context, text_to_encode)
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
            )
        await send_main_menu(update, context)
        return

    # –£–¥–∞–ª—è–µ–º prompt-—Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "prompt_message_id" in state_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=state_data["prompt_message_id"]
            )
        except Exception:
            pass

    text = update.message.text.strip()
    user_states.pop(user_id, None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state == "awaiting_file_path":
        await upload_file(update, context, os.path.normpath(text.strip('"')))
    
    elif current_state == "awaiting_command":
        await run_custom_command(update, context, text)
    
    elif current_state == "awaiting_qr_text":
        await generate_qr_code(update, context, text)
    
    elif current_state == "awaiting_clipboard_text":
        await set_clipboard(update, context, text)
    
    elif current_state == "awaiting_website_name":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL
        state_data["site_name"] = text
        state_data["state"] = "awaiting_website_url"
        prompt_msg_url = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–•–æ—Ä–æ—à–æ, '{text}'. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å–∞–π—Ç–∞:"
        )
        state_data["prompt_message_id"] = prompt_msg_url.message_id
        user_states[user_id] = state_data
        return
    
    elif current_state == "awaiting_website_url":
        if state_data.get("site_name") and text:
            await add_website(update, context, state_data["site_name"], text)
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ URL."
            )


    elif current_state == "awaiting_shutdown_timer":
        try:
            minutes = int(text)
            if minutes <= 0:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç."
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if platform.system() == "Windows":
                os.system(f"shutdown /s /t {minutes * 60}")
            else:
                os.system(f"shutdown -h +{minutes}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
            user_id = update.effective_user.id
            user_states[user_id] = {
                "shutdown_timer": True,
                "timer_minutes": minutes
            }
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚è∞ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–ö –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.\n"
                     "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."
            )
        except ValueError:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            )
    
    elif current_state == "awaiting_shutdown_timer":
        try:
            minutes = int(text)
            if minutes <= 0:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç."
                )
            else:
                seconds = minutes * 60
                if platform.system() == "Windows":
                    cmd = f"shutdown /s /t {seconds}"
                else:
                    cmd = f"shutdown -h +{minutes}"

                os.system(cmd)
                user_states[user_id] = {
                    "shutdown_timer": True,
                    "timer_minutes": minutes
                }
                
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚è≥ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–ö –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä'."
                )
        except ValueError:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            )
    
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await send_main_menu(update, context)

async def set_shutdown_timer(update: Update, context: ContextTypes.DEFAULT_TYPE, minutes: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö"""
    try:
        minutes = int(minutes)
        if minutes <= 0:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            return

        seconds = minutes * 60
        if platform.system() == "Windows":
            cmd = f"shutdown /s /t {seconds}"
        else:
            cmd = f"shutdown -h +{minutes}"

        os.system(cmd)
        user_id = update.effective_user.id
        user_states[user_id] = {"shutdown_timer": True, "timer_minutes": minutes}
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚è≥ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–ö –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.\n"
                 "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä'."
        )
    except ValueError:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def cancel_shutdown_timer(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"""
    try:
        if platform.system() == "Windows":
            os.system("shutdown /a")  # –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Windows
        else:
            os.system("shutdown -c")  # –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Linux/Mac
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
        user_id = query.from_user.id
        if user_id in user_states and "shutdown_timer" in user_states[user_id]:
            del user_states[user_id]["shutdown_timer"]
        
        await query.answer("–¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
        await send_advanced_features_menu(query, context)
    except Exception as e:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞: {e}"
        )

async def toggle_sound(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ (mute/unmute)"""
    try:
        if platform.system() == "Windows":
            from ctypes import cast, POINTER
            from comtypes import CLSCTX_ALL
            from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
            
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = cast(interface, POINTER(IAudioEndpointVolume))
            
            is_muted = volume.GetMute()
            volume.SetMute(not is_muted, None)
            
            status = "–≤—ã–∫–ª—é—á–µ–Ω üîá" if not is_muted else "–≤–∫–ª—é—á–µ–Ω üîä"
            await query.answer(f"–ó–≤—É–∫ {status}", show_alert=True)
        else:
            await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–≤—É–∫–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–≤—É–∫–∞", show_alert=True)

async def toggle_focus_assist(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    try:
        if platform.system() != "Windows":
            await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows", show_alert=True)
            return

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ PowerShell
        try:
            ps_command = """
            $prefs = Get-WindowsFocusAssist
            if ($prefs.State -eq "PriorityOnly") {
                Set-WindowsFocusAssist -State Off
                "–†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω"
            } else {
                Set-WindowsFocusAssist -State PriorityOnly
                "–†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"
            }
            """
            result = subprocess.run(["powershell", "-Command", ps_command], capture_output=True, text=True, shell=True)
            output = result.stdout.strip() or "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ"
            await query.answer(output, show_alert=True)
        except Exception as ps_error:
            print(f"PowerShell –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {ps_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ PowerShell. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.", show_alert=True)
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É", show_alert=True)

async def take_photo(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    if cv2 is None:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå OpenCV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: `pip install opencv-python`"
        )
        return

    await context.bot.send_message(chat_id=query.message.chat_id, text="üì∑ –ò—â—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–∞–º–µ—Ä—É...")

    # –ü—Ä–æ–±—É–µ–º –∫–∞–º–µ—Ä—ã 0 –∏ 1 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π/–≤–Ω–µ—à–Ω–µ–π –∫–∞–º–µ—Ä—ã)
    for camera_index in [0, 1]:
        cap = None
        try:
            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º CAP_DSHOW –¥–ª—è Windows –∏ –∏–∑–±–µ–≥–∞–µ–º iVCam
            cap = cv2.VideoCapture(camera_index, cv2.CAP_DSHOW)
            
            if not cap.isOpened():
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å

            # –î–∞—ë–º –∫–∞–º–µ—Ä–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            for _ in range(5):
                cap.read()

            # –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫
            ret, frame = cap.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ iVCam (–ø—É—Å—Ç–æ–π/—á—ë—Ä–Ω—ã–π –∫–∞–¥—Ä –∏–ª–∏ –Ω–∞–¥–ø–∏—Å—å)
            if not ret or frame is None or frame.mean() < 10:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–±–∏—Ç—ã–µ" –∫–∞–¥—Ä—ã

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            pil_image = Image.fromarray(image)
            
            byte_arr = io.BytesIO()
            pil_image.save(byte_arr, format='JPEG')
            byte_arr.seek(0)
            
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=byte_arr,
                caption=f"–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã #{camera_index}"
            )
            return  # –£—Å–ø–µ—Ö ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å –∫–∞–º–µ—Ä–æ–π #{camera_index}: {e}")
            continue

        finally:
            if cap is not None:
                cap.release()  # –í–∞–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–∞–º–µ—Ä—É!

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –Ω–∏ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
             "1. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
             "2. –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –∫–∞–º–µ—Ä—É\n"
             "3. iVCam –æ—Ç–∫–ª—é—á—ë–Ω –≤ –î–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    )

# --- –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô ---

async def shutdown_pc(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=query.message.chat_id, text="üî¥ –í—ã–∫–ª—é—á–∞—é –ü–ö...")
    cmd = "shutdown /s /t 1" if platform.system() == "Windows" else "poweroff"
    os.system(cmd)

async def restart_pc(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ü–ö...")
    cmd = "shutdown /r /t 1" if platform.system() == "Windows" else "reboot"
    os.system(cmd)

async def turn_off_monitor(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    try:
        if platform.system() == "Windows": ctypes.windll.user32.SendMessageW(0xFFFF, 0x0112, 0xF170, 2)
        elif platform.system() == "Linux": os.system("xset dpms force off")
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö´ –ú–æ–Ω–∏—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
    except Exception as e: await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def get_pc_status(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    status_text = (f"üíª **–°—Ç–∞—Ç—É—Å –ü–ö**\n\n"
                   f"üî∏ **CPU**: {psutil.cpu_percent(interval=1)}%\n"
                   f"üî∏ **RAM**: {psutil.virtual_memory().percent}% \n"
                   f"üî∏ **–î–∏—Å–∫**: {psutil.disk_usage('/').percent}%")
    await context.bot.send_message(chat_id=query.message.chat_id, text=status_text, parse_mode='Markdown')

async def take_screenshot(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=query.message.chat_id, text="üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
    try:
        screenshot = pyautogui.screenshot() if platform.system() == "Windows" and pyautogui else ImageGrab.grab()
        byte_arr = io.BytesIO()
        screenshot.save(byte_arr, format='PNG')
        byte_arr.seek(0)
        await context.bot.send_photo(chat_id=query.message.chat_id, photo=byte_arr, caption="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞")
    except Exception as e: await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}.")

async def get_battery_status(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    try:
        battery = psutil.sensors_battery()
        if not battery:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        plugged = "üîå –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è" if battery.power_plugged else "üîã –û—Ç –±–∞—Ç–∞—Ä–µ–∏"
        time_left = "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        if battery.secsleft and battery.secsleft < psutil.POWER_TIME_UNLIMITED:
            mins, _ = divmod(battery.secsleft, 60)
            hours, mins = divmod(mins, 60)
            time_left = f"{hours}—á {mins}–º–∏–Ω"
        text = f"**–°—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏**\n- –ó–∞—Ä—è–¥: {battery.percent}%\n- –°—Ç–∞—Ç—É—Å: {plugged}\n- –û—Å—Ç–∞–ª–æ—Å—å: {time_left}"
        await context.bot.send_message(chat_id=query.message.chat_id, text=text, parse_mode='Markdown')
    except Exception as e: await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def run_speed_test(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=query.message.chat_id, text="üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏...")
    try:
        result = subprocess.run(["speedtest-cli", "--simple"], capture_output=True, text=True, check=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n```\n{result.stdout}\n```", parse_mode='MarkdownV2')
    except FileNotFoundError: await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –û—à–∏–±–∫–∞: `speedtest-cli` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e: await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def list_processes(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await query.answer("–°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    processes = sorted([p.info for p in psutil.process_iter(['pid', 'name', 'memory_percent']) if p.info['memory_percent']], key=lambda p: p['memory_percent'], reverse=True)[:15]
    keyboard = [[InlineKeyboardButton(f"‚ùå {p['name']} ({p['pid']})", callback_data=f"proc_kill_{p['pid']}")] for p in processes]
    keyboard.extend([[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="process_list")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="system_utilities_menu")]])
    try:
        await query.edit_message_text(text="üìà **–¢–æ–ø 15 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:**", reply_markup=InlineKeyboardMarkup(keyboard))
    except BadRequest as e:
        if "Message is not modified" not in str(e): print(f"Error updating process list: {e}")

async def kill_process(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    pid = int(query.data.replace("proc_kill_", ""))
    try:
        p = psutil.Process(pid)
        p.kill()
        await query.answer(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} ({p.name()}) –∑–∞–≤–µ—Ä—à–µ–Ω.", show_alert=True)
    except psutil.NoSuchProcess: await query.answer("–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
    except psutil.AccessDenied: await query.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.", show_alert=True)
    await list_processes(query, context)

async def get_clipboard(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    if not pyperclip: return
    try: await context.bot.send_message(chat_id=query.message.chat_id, text=f"`{pyperclip.paste()}`", parse_mode='MarkdownV2')
    except Exception as e: await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def set_clipboard(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    if not pyperclip: return
    try:
        pyperclip.copy(text)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ü–ö.")
    except Exception as e: await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def open_website(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    site = config["WEBSITES"][int(query.data.replace("open_website_", ""))]
    webbrowser.open_new_tab(site["url"])
    await context.bot.send_message(chat_id=query.message.chat_id, text=f"üåê –°–∞–π—Ç '{site['name']}' –æ—Ç–∫—Ä—ã—Ç.")

async def add_website(update: Update, context: ContextTypes.DEFAULT_TYPE, name: str, url: str):
    config.setdefault("WEBSITES", []).append({"name": name, "url": url})
    save_config()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –°–∞–π—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")

async def delete_website(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    deleted_site = config["WEBSITES"].pop(int(query.data.replace("delete_website_", "")))
    save_config()
    await query.answer(f"–°–∞–π—Ç '{deleted_site['name']}' —É–¥–∞–ª–µ–Ω.", show_alert=True)
    await send_web_actions_menu(query, context)

async def upload_file(update: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE, file_path: str):
    chat_id = get_chat_user_id(update)[0]
    if not os.path.isfile(file_path):
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª.")
        return
    try:
        await context.bot.send_message(chat_id=chat_id, text=f"üì• –ó–∞–≥—Ä—É–∂–∞—é: `{os.path.basename(file_path)}`...")
        with open(file_path, 'rb') as f: await context.bot.send_document(chat_id=chat_id, document=f)
    except Exception as e: await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def run_custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üöÄ –í—ã–ø–æ–ª–Ω—è—é: `{command}`")
    try:
        result = subprocess.run(command.split(), capture_output=True, text=True, check=False, encoding='cp866', errors='ignore')
        response = f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç**:\n```\n{result.stdout or '(–ø—É—Å—Ç–æ)'}\n```"
        if result.stderr: response += f"\n‚ö†Ô∏è **–û—à–∏–±–∫–∏**:\n```\n{result.stderr}\n```"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response[:4090], parse_mode='MarkdownV2')
    except Exception as e: await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def file_manager_handler(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    current_path = user_current_path.get(user_id, os.path.expanduser("~"))
    action = query.data

    if action == "fm_nav_..": path = os.path.dirname(current_path)
    elif action.startswith("fm_nav_"): path = os.path.join(current_path, action.replace("fm_nav_", ""))
    else: path = current_path

    if not os.path.isdir(path):
        await query.answer("–û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞.", show_alert=True)
        return

    user_current_path[user_id] = path
    keyboard = []
    try:
        if os.path.dirname(path) != path: keyboard.append([InlineKeyboardButton("‚¨ÜÔ∏è .. (–ù–∞–≤–µ—Ä—Ö)", callback_data="fm_nav_..")])
        items = os.listdir(path)
        dirs = sorted([d for d in items if os.path.isdir(os.path.join(path, d))])
        files = sorted([f for f in items if os.path.isfile(os.path.join(path, f))])
        for d in dirs: keyboard.append([InlineKeyboardButton(f"üìÅ {d}", callback_data=f"fm_nav_{d}")])
        for f in files: keyboard.append([InlineKeyboardButton(f"üìÑ {f}", callback_data=f"fm_upload_{f}")])
    except Exception as e: keyboard.append([InlineKeyboardButton(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}", callback_data="no_action")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="file_script_menu")])
    display_path = path if len(path) < 60 else f"...{path[-57:]}"
    try:
        await query.edit_message_text(text=f"**–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä**\n`{display_path}`", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='MarkdownV2')
    except BadRequest as e:
        if "Message is not modified" not in str(e): print(f"Error updating file manager: {e}")

async def file_manager_upload_handler(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    current_path = user_current_path.get(query.from_user.id, os.path.expanduser("~"))
    file_name = query.data.replace("fm_upload_", "")
    await query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é {file_name}...")
    await upload_file(query, context, os.path.join(current_path, file_name))

async def generate_qr_code(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    byte_arr = io.BytesIO()
    qrcode.make(text).save(byte_arr, format="PNG")
    byte_arr.seek(0)
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=byte_arr, caption=f"`{text}`", parse_mode='MarkdownV2')

async def send_tutorial_file(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=query.message.chat_id, text=TUTORIAL_TEXT, parse_mode='Markdown')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏–∑ —Ç—Ä–µ—è
bot_running = False
bot_thread = None
application_instance = None # –•—Ä–∞–Ω–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä ApplicationBuilder
bot_loop = None

async def run_bot_async():
    global bot_running, application_instance
    bot_running = True
    try:
        application_instance = ApplicationBuilder().token(TOKEN).build()
        application_instance.add_handler(CommandHandler("start", start))
        application_instance.add_handler(CommandHandler("qr", handle_message))
        application_instance.add_handler(CallbackQueryHandler(button_handler))
        application_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–∏–∑ —Ç—Ä–µ—è)...")
        await application_instance.initialize()
        await application_instance.updater.start_polling()
        await application_instance.start()

        while bot_running: # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –ø–æ–∫–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
            await asyncio.sleep(1)

    except Conflict:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞!")
    except asyncio.CancelledError:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—á–µ—Ä–µ–∑ —Ç—Ä–µ–π).")
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {type(e).__name__}: {e}")
    finally:
        if application_instance:
            print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ (–∏–∑ —Ç—Ä–µ—è)...")
            try:
                await application_instance.updater.stop()
                await application_instance.stop()
                await application_instance.shutdown()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ (–∏–∑ —Ç—Ä–µ—è): {e}")
        bot_running = False
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–∑ —Ç—Ä–µ—è)")

def run_bot_in_thread_target():
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ asyncio –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global bot_loop # <<< –î–û–ë–ê–í–¨–¢–ï global bot_loop
    bot_loop = asyncio.new_event_loop() # <<< bot_loop —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π
    asyncio.set_event_loop(bot_loop)
    bot_loop.run_until_complete(run_bot_async())

def stop_bot_in_thread(icon):
    global bot_thread, bot_running, bot_loop # <<< –î–û–ë–ê–í–¨–¢–ï global bot_loop
    if bot_running and bot_thread and bot_thread.is_alive():
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º bot_loop, –∞ –Ω–µ asyncio.get_event_loop()
        if bot_loop and bot_loop.is_running():
            asyncio.run_coroutine_threadsafe(stop_bot_async(), bot_loop)

        bot_thread.join(timeout=5) # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–æ 5 —Å–µ–∫—É–Ω–¥
        if bot_thread.is_alive():
            print("–ë–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Å—Ä–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        icon.notify("–ë–æ—Ç Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", "PCLink")
    else:
        print("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def start_bot_in_thread(icon):
    global bot_thread, bot_running
    if not bot_running:
        print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ...")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        new_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(new_loop)
        bot_thread = threading.Thread(target=lambda: new_loop.run_until_complete(run_bot_async()))
        bot_thread.start()
        icon.notify("–ë–æ—Ç Telegram –∑–∞–ø—É—â–µ–Ω!", "PCLink")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    else:
        print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

async def stop_bot_async():
    global bot_running, application_instance
    if bot_running and application_instance:
        bot_running = False # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å updater –∏–∑–≤–Ω–µ, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if application_instance.updater and application_instance.updater.running:
             await application_instance.updater.stop()
        if application_instance.running:
            await application_instance.stop()
        print("–°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        print("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

def exit_app(icon):
    stop_bot_in_thread(icon)
    icon.stop()
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–∫–æ–Ω–∫–∏
    load_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏
    icon_path = "PCLink.ico" # <--- –≠—Ç—É —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    if not os.path.exists(icon_path):
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∫–æ–Ω–∫–∏ '{icon_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º.")
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –≤—ã–π—Ç–∏
        sys.exit(1)

    image = Image.open(icon_path) # <--- –≠—Ç—É —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

    menu = (pystray.MenuItem("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", start_bot_in_thread),
            pystray.MenuItem("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", stop_bot_in_thread),
            pystray.MenuItem("–í—ã—Ö–æ–¥", exit_app))

    icon = pystray.Icon("PCLinkBot", image, "PCLink Bot", menu)

    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PCLink Bot –∑–∞–ø—É—â–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    icon.run()

    menu = (pystray.MenuItem("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", start_bot_in_thread),
            pystray.MenuItem("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", stop_bot_in_thread),
            pystray.MenuItem("–í—ã—Ö–æ–¥", exit_app))

    icon = pystray.Icon("PCLinkBot", image, "PCLink Bot", menu)

    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PCLink Bot –∑–∞–ø—É—â–µ–Ω–æ. –ò–∫–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç—Ä–µ–µ.")
    try:
        icon.run() # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π, –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ—è.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è: {e}")